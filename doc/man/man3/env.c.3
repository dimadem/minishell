.TH "/Users/dimadem/Documents/GitHub/minishell/src/env/env.c" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/src/env/env.c
.SH SYNOPSIS
.br
.PP
\fR#include 'env\&.h'\fP
.br
\fR#include 'libft\&.h'\fP
.br
\fR#include <stdlib\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBinit_env\fP (t_env **data_envp, char **envp)"
.br
.ti -1c
.RI "void \fBadd_env_node\fP (t_env **data_envp, char *line)"
.br
.ti -1c
.RI "char * \fBget_env\fP (t_env *envp, const char *key)"
.br
.ti -1c
.RI "void \fBset_env\fP (t_env **env, const char *key, const char *value)"
.br
.ti -1c
.RI "int \fBunset_env\fP (t_env **env, const char *name)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void add_env_node (t_env ** data_envp, char * line)"

.PP
Definition at line \fB33\fP of file \fBenv\&.c\fP\&.
.nf
34 {
35     t_env   *new_node;
36     t_env   *curr_node;
37     char    *key;
38     char    *value;
39 
40     new_node = (t_env *)malloc(sizeof(t_env) + 1);
41     if (!new_node)
42         return ;
43     key = ft_strcdup(line, '=');
44     value = ft_strchr(line, '=') + 1;
45     new_node\->key = ft_strdup(key);
46     new_node\->value = ft_strdup(value);
47     free(key);
48     new_node\->next = NULL;
49     if (*data_envp == NULL)
50     {
51         *data_envp = new_node;
52         return ;
53     }
54     curr_node = *data_envp;
55     while (curr_node\->next != NULL)
56         curr_node = curr_node\->next;
57     curr_node\->next = new_node;
58 }
.PP
.fi

.PP
References \fBft_strcdup()\fP\&.
.PP
Referenced by \fBinit_env()\fP\&.
.SS "char * get_env (t_env * envp, const char * key)"

.PP
Definition at line \fB60\fP of file \fBenv\&.c\fP\&.
.nf
61 {
62     t_env   *curr_node;
63 
64     curr_node = envp;
65     while (curr_node)
66     {
67         if (ft_strcmp(curr_node\->key, key) == 0)
68             return (curr_node\->value);
69         curr_node = curr_node\->next;
70     }
71     return (NULL);
72 }
.PP
.fi

.PP
Referenced by \fBadd_env()\fP, \fBbuiltin_cd()\fP, \fBft_find_path()\fP, \fBgenerate_prompt_string()\fP, \fBtest_get_env()\fP, \fBtest_set_env()\fP, and \fBtest_unset_env()\fP\&.
.SS "void init_env (t_env ** data_envp, char ** envp)"

.PP
Definition at line \fB24\fP of file \fBenv\&.c\fP\&.
.nf
25 {
26     int i;
27 
28     i = \-1;
29     while (envp[++i])
30         add_env_node(data_envp, envp[i]);
31 }
.PP
.fi

.PP
References \fBadd_env_node()\fP\&.
.PP
Referenced by \fBinit_minishell_data()\fP, \fBtest_get_env()\fP, \fBtest_init_env()\fP, and \fBtest_set_env()\fP\&.
.SS "void set_env (t_env ** env, const char * key, const char * value)"

.PP
Definition at line \fB79\fP of file \fBenv\&.c\fP\&.
.nf
80 {
81     t_env   *current;
82     t_env   *new_env;
83 
84     current = *env;
85     while (current)
86     {
87         if (ft_strcmp(current\->key, key) == 0)
88         {
89             current\->value = ft_strdup(value);
90             return ;
91         }
92         current = current\->next;
93     }
94     new_env = malloc(sizeof(t_env));
95     new_env\->key = ft_strdup(key);
96     new_env\->value = ft_strdup(value);
97     new_env\->next = *env;
98     *env = new_env;
99 }
.PP
.fi

.PP
Referenced by \fBadd_env()\fP, \fBbuiltin_cd()\fP, \fBtest_set_env()\fP, and \fBtest_unset_env()\fP\&.
.SS "int unset_env (t_env ** env, const char * name)"

.PP
Definition at line \fB101\fP of file \fBenv\&.c\fP\&.
.nf
102 {
103     t_env   *current;
104     t_env   *prev;
105 
106     current = *env;
107     prev = NULL;
108     while (current)
109     {
110         if (ft_strcmp(current\->key, key) == 0)
111         {
112             if (prev)
113                 prev\->next = current\->next;
114             else
115                 *env = current\->next;
116             free(current\->key);
117             free(current\->value);
118             free(current);
119             return (0);
120         }
121         prev = current;
122         current = current\->next;
123     }
124     return (\-1);
125 }
.PP
.fi

.PP
Referenced by \fBbuiltin_unset()\fP, and \fBtest_unset_env()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
