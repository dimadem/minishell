.TH "/Users/dimadem/Documents/GitHub/minishell/src/utils/prompt.c" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/src/utils/prompt.c
.SH SYNOPSIS
.br
.PP
\fR#include 'tokens\&.h'\fP
.br
\fR#include 'env\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBgenerate_prompt\fP (\fBt_minishell_data\fP *data)"
.br
.ti -1c
.RI "char * \fBgenerate_prompt_string\fP (\fBt_minishell_data\fP *data, char *pwd, char *home_dir)"
.br
.ti -1c
.RI "void \fBprint_maxishell\fP (void)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "char * generate_prompt (\fBt_minishell_data\fP * data)"

.PP
Definition at line \fB31\fP of file \fBprompt\&.c\fP\&.
.nf
32 {
33     char    *prompt;
34     size_t  prompt_len;
35 
36     if (data\->std_in == \-1)
37         prompt_len = ft_strlen("minishell:~> ") + 1;
38     else
39         prompt_len = ft_strlen("> ") + 1;
40     prompt = (char *)malloc(prompt_len);
41     if (!prompt)
42         exit(EXIT_FAILURE);
43     if (data\->std_in == \-1)
44         ft_strcpy(prompt, "minishell:~> ");
45     else
46         ft_strcpy(prompt, "> ");
47     return (prompt);
48 }
.PP
.fi

.PP
References \fBft_strcpy()\fP, \fBft_strlen()\fP, and \fBs_minishell_data::std_in\fP\&.
.PP
Referenced by \fBmain_loop()\fP\&.
.SS "char * generate_prompt_string (\fBt_minishell_data\fP * data, char * pwd, char * home_dir)"

.PP
Definition at line \fB50\fP of file \fBprompt\&.c\fP\&.
.nf
52 {
53     char    *temp_pwd;
54 
55     pwd = get_env(data\->envp, "PWD");
56     if (pwd)
57     {
58         home_dir = get_env(data\->envp, "HOME");
59         if (home_dir && ft_strncmp(pwd, home_dir, ft_strlen(home_dir)) == 0)
60         {
61             temp_pwd = ft_strjoin("~", pwd + ft_strlen(home_dir));
62             free(pwd);
63             pwd = temp_pwd;
64         }
65     }
66     return (pwd);
67 }
.PP
.fi

.PP
References \fBs_minishell_data::envp\fP, \fBft_strjoin()\fP, \fBft_strlen()\fP, \fBft_strncmp()\fP, and \fBget_env()\fP\&.
.SS "void print_maxishell (void )"

.PP
Definition at line \fB69\fP of file \fBprompt\&.c\fP\&.
.nf
70 {
71     ft_printf("\\033[1;33m\\n\\n\\n\\n\\n");
72     ft_printf("███╗░░░███╗░█████╗░██╗░░██╗██╗░██████╗██╗░"
73         "░██╗███████╗██╗░░░░░██╗░░░░░\\n");
74     ft_printf("████╗░████║██╔══██╗╚██╗██╔╝██║██╔════╝██║░"
75         "░██║██╔════╝██║░░░░░██║░░░░░\\n");
76     ft_printf("██╔████╔██║███████║░╚███╔╝░██║╚█████╗░█████"
77         "██║█████╗░░██║░░░░░██║░░░░░\\n");
78     ft_printf("██║╚██╔╝██║██╔══██║░██╔██╗░██║░╚═══██╗██╔══"
79         "██║██╔══╝░░██║░░░░░██║░░░░░\\n");
80     ft_printf("██║░╚═╝░██║██║░░██║██╔╝╚██╗██║██████╔╝██║░░"
81         "██║███████╗███████╗███████╗\\n");
82     ft_printf("╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝╚═════╝░╚═╝░░"
83         "╚═╝╚══════╝╚══════╝╚══════╝\\n");
84     ft_printf("\\n");
85     ft_printf("            \\033[1;34m"
86         "Version 0\&.0\&.0\\033[0m\\n");
87     ft_printf("           \\033[1;36m"
88         "By Димас и Ромас\\033[0m\\n");
89     ft_printf("\\n");
90 }
.PP
.fi

.PP
References \fBft_printf()\fP\&.
.PP
Referenced by \fBmain()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
