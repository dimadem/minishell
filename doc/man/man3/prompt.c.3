.TH "/Users/dimadem/Documents/GitHub/minishell/src/utils/prompt.c" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/src/utils/prompt.c
.SH SYNOPSIS
.br
.PP
\fR#include 'tokens\&.h'\fP
.br
\fR#include 'env\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBgenerate_prompt\fP (\fBt_minishell_data\fP *data)"
.br
.ti -1c
.RI "char * \fBgenerate_prompt_string\fP (\fBt_minishell_data\fP *data, char *pwd, char *home_dir)"
.br
.ti -1c
.RI "void \fBprint_maxishell\fP (void)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "char * generate_prompt (\fBt_minishell_data\fP * data)"

.PP
Definition at line \fB31\fP of file \fBprompt\&.c\fP\&.
.nf
32 {
33     char    *prompt;
34     size_t  prompt_len;
35 
36 /*
37      char   *pwd;
38      char   *home_dir;
39 
40      home_dir = NULL;
41      pwd = NULL;
42      pwd = generate_prompt_string(data, pwd, home_dir);
43 */
44     if (data\->temp_fd != \-1)
45         prompt_len = ft_strlen("> ") + 1;
46     else
47         prompt_len = ft_strlen("minishell:~> ") + 1;
48 /*
49      prompt_len = ft_strlen("🌴\\e[1m @maxishell:~> \\e[m") + \\
50             ft_strlen(get_env(data\->envp, "LOGNAME")) + \\
51             ft_strlen(pwd) + \\
52             1;
53 */
54     prompt = (char *)malloc(prompt_len);
55     if (!prompt)
56         exit(EXIT_FAILURE);
57     if (data\->temp_fd != \-1)
58         ft_strcpy(prompt, "> ");
59     else
60         ft_strcpy(prompt, "minishell:~> ");
61 /*
62     ft_strcpy(prompt, "🌴\\e[1m ");
63     ft_strcat(prompt, get_env(data\->envp, "LOGNAME"));
64     ft_strcat(prompt, "@maxishell:");
65     ft_strcat(prompt, pwd);
66     ft_strcat(prompt, "> \\e[m");
67 */
68     return (prompt);
69 }
.PP
.fi

.PP
References \fBft_strcpy()\fP, \fBft_strlen()\fP, and \fBs_minishell_data::temp_fd\fP\&.
.PP
Referenced by \fBmain_loop()\fP\&.
.SS "char * generate_prompt_string (\fBt_minishell_data\fP * data, char * pwd, char * home_dir)"

.PP
Definition at line \fB71\fP of file \fBprompt\&.c\fP\&.
.nf
73 {
74     char    *temp_pwd;
75 
76     pwd = get_env(data\->envp, "PWD");
77     if (pwd)
78     {
79         home_dir = get_env(data\->envp, "HOME");
80         if (home_dir && ft_strncmp(pwd, home_dir, ft_strlen(home_dir)) == 0)
81         {
82             temp_pwd = ft_strjoin("~", pwd + ft_strlen(home_dir));
83             free(pwd);
84             pwd = temp_pwd;
85         }
86     }
87     return (pwd);
88 }
.PP
.fi

.PP
References \fBs_minishell_data::envp\fP, \fBft_strjoin()\fP, \fBft_strlen()\fP, \fBft_strncmp()\fP, and \fBget_env()\fP\&.
.SS "void print_maxishell (void )"

.PP
Definition at line \fB90\fP of file \fBprompt\&.c\fP\&.
.nf
91 {
92     ft_printf("\\033[1;33m\\n\\n\\n\\n\\n");
93     ft_printf("███╗░░░███╗░█████╗░██╗░░██╗██╗░██████╗██╗░"
94         "░██╗███████╗██╗░░░░░██╗░░░░░\\n");
95     ft_printf("████╗░████║██╔══██╗╚██╗██╔╝██║██╔════╝██║░"
96         "░██║██╔════╝██║░░░░░██║░░░░░\\n");
97     ft_printf("██╔████╔██║███████║░╚███╔╝░██║╚█████╗░█████"
98         "██║█████╗░░██║░░░░░██║░░░░░\\n");
99     ft_printf("██║╚██╔╝██║██╔══██║░██╔██╗░██║░╚═══██╗██╔══"
100         "██║██╔══╝░░██║░░░░░██║░░░░░\\n");
101     ft_printf("██║░╚═╝░██║██║░░██║██╔╝╚██╗██║██████╔╝██║░░"
102         "██║███████╗███████╗███████╗\\n");
103     ft_printf("╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝╚═════╝░╚═╝░░"
104         "╚═╝╚══════╝╚══════╝╚══════╝\\n");
105     ft_printf("\\n");
106     ft_printf("            \\033[1;34m"
107         "Version 0\&.0\&.0\\033[0m\\n");
108     ft_printf("           \\033[1;36m"
109         "By Димас и Ромас\\033[0m\\n");
110     ft_printf("\\n");
111 }
.PP
.fi

.PP
References \fBft_printf()\fP\&.
.PP
Referenced by \fBmain()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
