.TH "/Users/dimadem/Documents/GitHub/minishell/inc/redirection.h" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/inc/redirection.h
.SH SYNOPSIS
.br
.PP
\fR#include 'shell\&.h'\fP
.br
\fR#include 'tokens\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBredirect_in\fP (\fBt_ast\fP *node, \fBt_ms_data\fP *data)"
.br
.RI "redirection input in context of executing AST "
.ti -1c
.RI "int \fBredirect_out\fP (\fBt_ast\fP *node, \fBt_ms_data\fP *data)"
.br
.RI "redirect out '>' to the file output "
.ti -1c
.RI "int \fBredirect_append\fP (\fBt_ast\fP *node, \fBt_ms_data\fP *data)"
.br
.RI "redirect append '>>' to the end of the file output "
.ti -1c
.RI "int \fBredirect_here_doc\fP (\fBt_ast\fP *node, \fBt_ms_data\fP *data)"
.br
.RI "This function handle '<<' heredoc functionality\&. "
.ti -1c
.RI "int \fBopen_file\fP (\fBt_ast\fP *node, char *direction)"
.br
.RI "open file in the context of redirection "
.in -1c
.SH "Function Documentation"
.PP 
.SS "int open_file (\fBt_ast\fP * node, char * direction)"

.PP
open file in the context of redirection -- '<' - read
.IP "\(bu" 2
'>' - write
.IP "\(bu" 2
'>>' - append
.IP "\(bu" 2
'tty' - open /dev/tty
.IP "\(bu" 2

.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fInode\fP current node in the AST
.RE
.PP

.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIdirection\fP type of redirection
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
int file descriptor 
.RE
.PP

.PP

.PP
Definition at line \fB32\fP of file \fButils\&.c\fP\&.
.nf
33 {
34     int fd;
35 
36     if ((ft_strcmp(direction, "<") == 0) || (ft_strcmp(direction, "read") == 0))
37         fd = open(node\->args[0], O_RDONLY);
38     else if (ft_strcmp(direction, ">") == 0)
39         fd = open(node\->args[0], O_WRONLY | O_CREAT | O_TRUNC, 0644);
40     else if ((ft_strcmp(direction, ">>") == 0) \\
41                 || (ft_strcmp(direction, "temp") == 0))
42         fd = open(node\->args[0], O_WRONLY | O_CREAT | O_APPEND, 0644);
43     else if (ft_strcmp(direction, "tty") == 0)
44         fd = open("/dev/tty", O_RDWR);
45     else
46         fd = \-1;
47     return (fd);
48 }
.PP
.fi

.PP
References \fBs_ast::args\fP, and \fBft_strcmp()\fP\&.
.PP
Referenced by \fBredirect_append()\fP, \fBredirect_in()\fP, and \fBredirect_out()\fP\&.
.SS "int redirect_append (\fBt_ast\fP * node, \fBt_ms_data\fP * data)"

.PP
redirect append '>>' to the end of the file output --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fInode\fP current node in the AST
.RE
.PP

.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIdata\fP minishell data structure
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
status:
.RE
.PP

.IP "\(bu" 2
0: success
.IP "\(bu" 2
1: error 
.PP

.PP
Definition at line \fB31\fP of file \fBredirect_append\&.c\fP\&.
.nf
32 {
33     pid_t   pid;
34     int     status;
35 
36     pid = fork();
37     if (pid == \-1)
38         return (1);
39     if (pid == 0)
40     {
41         data\->std_out = open_file(node\->right, ">>");
42         if (data\->std_out == \-1)
43             return (1);
44         execute_ast(node\->left, data);
45         exit(0);
46     }
47     waitpid(pid, &status, 0);
48     return (WEXITSTATUS(status));
49 }
.PP
.fi

.PP
References \fBexecute_ast()\fP, \fBs_ast::left\fP, \fBopen_file()\fP, \fBs_ast::right\fP, and \fBs_ms_data::std_out\fP\&.
.PP
Referenced by \fBexecute_ast()\fP\&.
.SS "int redirect_here_doc (\fBt_ast\fP * node, \fBt_ms_data\fP * data)"

.PP
This function handle '<<' heredoc functionality\&. --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fInode\fP current node in the AST
.RE
.PP

.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIdata\fP minishell data structure
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
status:
.RE
.PP

.IP "\(bu" 2
0: success
.IP "\(bu" 2
1: error 
.PP

.PP
Definition at line \fB34\fP of file \fBredirect_heredoc\&.c\fP\&.
.nf
35 {
36     char    *line;
37     char    *eof;
38     int     file_fd;
39 
40     line = NULL;
41     if (node\->right\->args[0] == NULL)
42         return (1);
43     file_fd = open_tmp_file("w");
44     eof = ft_strdup(node\->right\->args[0]);
45     line = readline("> ");
46     while (line && (ft_strcmp(line, eof) != 0))
47     {
48         write(file_fd, line, ft_strlen(line));
49         write(file_fd, "\\n", 1);
50         free(line);
51         line = readline("> ");
52     }
53     free(line);
54     free(eof);
55     close(file_fd);
56     file_fd = open_tmp_file("r");
57     execute_child(node\->left, data, &file_fd);
58     unlink("/tmp/heredoc");
59     return (0);
60 }
.PP
.fi

.PP
References \fBs_ast::args\fP, \fBexecute_child()\fP, \fBft_strcmp()\fP, \fBft_strdup()\fP, \fBft_strlen()\fP, \fBs_ast::left\fP, \fBopen_tmp_file()\fP, and \fBs_ast::right\fP\&.
.PP
Referenced by \fBexecute_ast()\fP\&.
.SS "int redirect_in (\fBt_ast\fP * node, \fBt_ms_data\fP * data)"

.PP
redirection input in context of executing AST --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fInode\fP current node in the AST
.RE
.PP

.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIdata\fP minishell structure data
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
status:
.RE
.PP

.IP "\(bu" 2
0: success
.IP "\(bu" 2
1: error 
.PP

.PP
Definition at line \fB38\fP of file \fBredirect_in\&.c\fP\&.
.nf
39 {
40     pid_t   pid;
41 
42     pid = fork();
43     if (pid == \-1)
44         return (1);
45     if (pid == 0)
46     {
47         data\->std_in = open_file(node\->right, "<");
48         if (data\->std_in == \-1)
49             return (1);
50         execute_ast(node\->left, data);
51         exit(0);
52     }
53     waitpid(pid, &data\->exit_status, 0);
54     return (0);
55 }
.PP
.fi

.PP
References \fBexecute_ast()\fP, \fBs_ms_data::exit_status\fP, \fBs_ast::left\fP, \fBopen_file()\fP, \fBs_ast::right\fP, and \fBs_ms_data::std_in\fP\&.
.PP
Referenced by \fBexecute_ast()\fP\&.
.SS "int redirect_out (\fBt_ast\fP * node, \fBt_ms_data\fP * data)"

.PP
redirect out '>' to the file output --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fInode\fP current node in the AST
.RE
.PP

.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIdata\fP minishell data structure
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
status:
.RE
.PP

.IP "\(bu" 2
0: success
.IP "\(bu" 2
1: error 
.PP

.PP
Definition at line \fB32\fP of file \fBredirect_out\&.c\fP\&.
.nf
33 {
34     pid_t   pid;
35     int     status;
36 
37     pid = fork();
38     if (pid == \-1)
39         return (1);
40     if (pid == 0)
41     {
42         data\->std_out = open_file(node\->right, ">");
43         if (data\->std_out == \-1)
44             return (1);
45         execute_ast(node\->left, data);
46         exit(0);
47     }
48     waitpid(pid, &status, 0);
49     return (WEXITSTATUS(status));
50 }
.PP
.fi

.PP
References \fBexecute_ast()\fP, \fBs_ast::left\fP, \fBopen_file()\fP, \fBs_ast::right\fP, and \fBs_ms_data::std_out\fP\&.
.PP
Referenced by \fBexecute_ast()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
