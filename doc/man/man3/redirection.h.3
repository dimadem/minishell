.TH "/Users/dimadem/Documents/GitHub/minishell/inc/redirection.h" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/inc/redirection.h
.SH SYNOPSIS
.br
.PP
\fR#include 'shell\&.h'\fP
.br
\fR#include 'tokens\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBredirect_in\fP (\fBt_ast\fP *node, \fBt_minishell_data\fP *data)"
.br
.ti -1c
.RI "int \fBredirect_out\fP (\fBt_ast\fP *node, \fBt_minishell_data\fP *data)"
.br
.ti -1c
.RI "int \fBopen_file\fP (\fBt_ast\fP *node, char *direction)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int open_file (\fBt_ast\fP * node, char * direction)"

.PP
Definition at line \fB10\fP of file \fButils\&.c\fP\&.
.nf
11 {
12     int fd;
13     
14     if (ft_strcmp(direction, ">") == 0)
15         fd = open(node\->args[0], O_WRONLY | O_CREAT | O_TRUNC, 0644);
16     else if (ft_strcmp(direction, ">>") == 0)
17         fd = open(node\->args[0], O_WRONLY | O_CREAT | O_APPEND, 0644);
18     else if (ft_strcmp(direction, "<") == 0)
19         fd = open(node\->args[0], O_RDONLY);
20     else if (ft_strcmp(direction, "tty") == 0)
21         fd = open("/dev/tty", O_RDWR);
22     else
23         fd = \-1;
24     return (fd);
25 }
.PP
.fi

.PP
References \fBs_ast::args\fP, and \fBft_strcmp()\fP\&.
.PP
Referenced by \fBexecute_redirect()\fP, and \fBredirect_in()\fP\&.
.SS "int redirect_in (\fBt_ast\fP * node, \fBt_minishell_data\fP * data)"

.PP
Definition at line \fB13\fP of file \fBredirect_in\&.c\fP\&.
.nf
14 {
15     pid_t   pid;
16 
17     pid = fork();
18     if (pid == \-1)
19         return (1);
20     if (pid == 0)
21     {
22         data\->temp_fd = open_file(node\->right, "<");
23         if (data\->temp_fd == \-1)
24             return (1);
25         execute_ast(node\->left, data);
26         exit(0);
27     }
28     waitpid(pid, &data\->exit_status, 0);
29     return (0);
30 }
.PP
.fi

.PP
References \fBexecute_ast()\fP, \fBs_minishell_data::exit_status\fP, \fBs_ast::left\fP, \fBopen_file()\fP, \fBs_ast::right\fP, and \fBs_minishell_data::temp_fd\fP\&.
.PP
Referenced by \fBexecute_ast()\fP\&.
.SS "int redirect_out (\fBt_ast\fP * node, \fBt_minishell_data\fP * data)"

.PP
Definition at line \fB10\fP of file \fBredirect_out\&.c\fP\&.
.nf
11 {
12         int fd[2];
13     pid_t   pid_1;
14     pid_t   pid_2;
15     int status;
16 
17     if (pipe(fd) == \-1)
18         ft_perror("pipe");
19     pid_1 = execute_redirect(node\->left, data, fd, 0);
20     pid_2 = execute_redirect(node\->right, data, fd, 1);
21     close_fds(fd);
22     waitpid(pid_1, &status, 0);
23         waitpid(pid_2, &status, 0);
24     return (WEXITSTATUS(status));
25 }
.PP
.fi

.PP
References \fBclose_fds()\fP, \fBexecute_redirect()\fP, \fBft_perror()\fP, \fBs_ast::left\fP, and \fBs_ast::right\fP\&.
.PP
Referenced by \fBexecute_ast()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
