.TH "/Users/dimadem/Documents/GitHub/minishell/src/utils/visualiser.c" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/src/utils/visualiser.c
.SH SYNOPSIS
.br
.PP
\fR#include 'tokens\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "const char * \fBget_token_type_name\fP (t_token_type type)"
.br
.ti -1c
.RI "void \fBprint_ast_node\fP (t_ast *node, int depth, char *prefix, int is_left)"
.br
.ti -1c
.RI "void \fBbuild_new_prefix\fP (char *new_prefix, char *prefix, int is_left)"
.br
.ti -1c
.RI "void \fBprint_ast_graphical\fP (t_ast *node, int depth, char *prefix, int is_left)"
.br
.ti -1c
.RI "void \fBprint_ast_root\fP (t_ast *root)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void build_new_prefix (char * new_prefix, char * prefix, int is_left)"

.PP
Definition at line \fB63\fP of file \fBvisualiser\&.c\fP\&.
.nf
64 {
65     int i;
66     int j;
67 
68     i = 0;
69     j = 0;
70     while (prefix[i])
71     {
72         new_prefix[j] = prefix[i];
73         i++;
74         j++;
75     }
76     if (is_left)
77     {
78         new_prefix[j++] = '|';
79         new_prefix[j++] = ' ';
80         new_prefix[j++] = ' ';
81     }
82     else
83     {
84         new_prefix[j++] = ' ';
85         new_prefix[j++] = ' ';
86         new_prefix[j++] = ' ';
87     }
88     new_prefix[j] = '\\0';
89 }
.PP
.fi

.PP
Referenced by \fBprint_ast_graphical()\fP\&.
.SS "const char * get_token_type_name (t_token_type type)"

.PP
Definition at line \fB15\fP of file \fBvisualiser\&.c\fP\&.
.nf
16 {
17     if (type == PHRASE)
18         return ("PHRASE");
19     else if (type == PIPE)
20         return ("PIPE");
21     else if (type == ENV_VAR)
22         return ("ENV_VAR");
23     else if (type == REDIR_IN)
24         return ("REDIR_IN");
25     else if (type == REDIR_OUT)
26         return ("REDIR_OUT");
27     else if (type == REDIR_APPEND)
28         return ("REDIR_APPEND");
29     else if (type == REDIR_HEREDOC)
30         return ("REDIR_HEREDOC");
31     else
32         return ("UNKNOWN");
33 }
.PP
.fi

.PP
Referenced by \fBprint_ast_node()\fP\&.
.SS "void print_ast_graphical (t_ast * node, int depth, char * prefix, int is_left)"

.PP
Definition at line \fB91\fP of file \fBvisualiser\&.c\fP\&.
.nf
92 {
93     char    new_prefix[256];
94 
95     print_ast_node(node, depth, prefix, is_left);
96     build_new_prefix(new_prefix, prefix, is_left);
97     if (node\->left)
98         print_ast_graphical(node\->left, depth + 1, new_prefix, 1);
99     if (node\->right)
100         print_ast_graphical(node\->right, depth + 1, new_prefix, 0);
101 }
.PP
.fi

.PP
References \fBbuild_new_prefix()\fP, \fBprint_ast_graphical()\fP, and \fBprint_ast_node()\fP\&.
.PP
Referenced by \fBprint_ast_graphical()\fP, and \fBprint_ast_root()\fP\&.
.SS "void print_ast_node (t_ast * node, int depth, char * prefix, int is_left)"

.PP
Definition at line \fB35\fP of file \fBvisualiser\&.c\fP\&.
.nf
36 {
37     int i;
38 
39     if (!node)
40         return ;
41     printf("%s", prefix);
42     if (depth == 0)
43         printf("Root\-> ");
44     else
45     {
46         if (is_left)
47             printf("L\-> ");
48         else
49             printf("R\-> ");
50     }
51     printf("Type: %s\\n", get_token_type_name(node\->type));
52     if (node\->args)
53     {
54         i = 0;
55         while (node\->args[i])
56         {
57             printf("%s     Arg: %s\\n", prefix, node\->args[i]);
58             i++;
59         }
60     }
61 }
.PP
.fi

.PP
References \fBget_token_type_name()\fP\&.
.PP
Referenced by \fBprint_ast_graphical()\fP\&.
.SS "void print_ast_root (t_ast * root)"

.PP
Definition at line \fB103\fP of file \fBvisualiser\&.c\fP\&.
.nf
104 {
105     print_ast_graphical(root, 0, "", 0);
106 }
.PP
.fi

.PP
References \fBprint_ast_graphical()\fP\&.
.PP
Referenced by \fBmain_loop()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
