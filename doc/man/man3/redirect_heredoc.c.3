.TH "/Users/dimadem/Documents/GitHub/minishell/src/redirection/redirect_heredoc.c" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/src/redirection/redirect_heredoc.c
.SH SYNOPSIS
.br
.PP
\fR#include 'shell\&.h'\fP
.br
\fR#include 'tokens\&.h'\fP
.br
\fR#include 'redirection\&.h'\fP
.br
\fR#include 'execute\&.h'\fP
.br
\fR#include <fcntl\&.h>\fP
.br
\fR#include <sys/wait\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBredirect_here_doc\fP (\fBt_ast\fP *node, \fBt_minishell_data\fP *data)"
.br
.RI "This function handle '<<' heredoc functionality\&. "
.ti -1c
.RI "static int \fBopen_tmp_file\fP (const char *type)"
.br
.ti -1c
.RI "static void \fBexecute_child\fP (\fBt_ast\fP *node, \fBt_minishell_data\fP *data, int *file_fd)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "static void execute_child (\fBt_ast\fP * node, \fBt_minishell_data\fP * data, int * file_fd)\fR [static]\fP"

.PP
Definition at line \fB76\fP of file \fBredirect_heredoc\&.c\fP\&.
.nf
77 {
78     pid_t   pid;
79 
80     pid = fork();
81     if (pid == \-1)
82         ft_perror("fork");
83     if (pid == 0)
84     {
85         data\->std_in = dup(*file_fd);
86         execute_ast(node, data);
87         exit(0);
88     }
89     close(*file_fd);
90     waitpid(pid, &data\->exit_status, 0);
91 }
.PP
.fi

.PP
References \fBexecute_ast()\fP, \fBs_minishell_data::exit_status\fP, \fBft_perror()\fP, and \fBs_minishell_data::std_in\fP\&.
.PP
Referenced by \fBredirect_here_doc()\fP\&.
.SS "static int open_tmp_file (const char * type)\fR [static]\fP"

.PP
Definition at line \fB62\fP of file \fBredirect_heredoc\&.c\fP\&.
.nf
63 {
64     int file_fd;    
65 
66     file_fd = \-1;
67     if (ft_strcmp(type, "w") == 0)
68         file_fd = open("/tmp/heredoc", O_WRONLY | O_CREAT | O_TRUNC, 0644);
69     else if (ft_strcmp(type, "r") == 0)
70         file_fd = open("/tmp/heredoc", O_RDONLY);
71     if (file_fd < 0)
72         ft_perror("open");
73     return (file_fd);
74 }
.PP
.fi

.PP
References \fBft_perror()\fP, and \fBft_strcmp()\fP\&.
.PP
Referenced by \fBredirect_here_doc()\fP\&.
.SS "int redirect_here_doc (\fBt_ast\fP * node, \fBt_minishell_data\fP * data)"

.PP
This function handle '<<' heredoc functionality\&. --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fInode\fP current node in the AST
.RE
.PP

.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIdata\fP minishell data structure
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
status:
.RE
.PP

.IP "\(bu" 2
0: success
.IP "\(bu" 2
1: error 
.PP

.PP
Definition at line \fB34\fP of file \fBredirect_heredoc\&.c\fP\&.
.nf
35 {
36     char    *line;
37     char    *eof;
38     int     file_fd;
39 
40     line = NULL;
41     if (node\->right\->args[0] == NULL)
42         return (1);
43     file_fd = open_tmp_file("w");
44     eof = ft_strdup(node\->right\->args[0]);
45     line = readline("> ");
46     while (line && (ft_strcmp(line, eof) != 0))
47     {
48         write(file_fd, line, ft_strlen(line));
49         write(file_fd, "\\n", 1);
50         free(line);
51         line = readline("> ");
52     }
53     free(line);
54     free(eof);
55     close(file_fd);
56     file_fd = open_tmp_file("r");
57     execute_child(node\->left, data, &file_fd);
58     unlink("/tmp/heredoc");
59     return (0);
60 }
.PP
.fi

.PP
References \fBs_ast::args\fP, \fBexecute_child()\fP, \fBft_strcmp()\fP, \fBft_strdup()\fP, \fBft_strlen()\fP, \fBs_ast::left\fP, \fBopen_tmp_file()\fP, and \fBs_ast::right\fP\&.
.PP
Referenced by \fBexecute_ast()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
