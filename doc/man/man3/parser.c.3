.TH "/Users/dimadem/Documents/GitHub/minishell/src/parser/parser.c" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/src/parser/parser.c
.SH SYNOPSIS
.br
.PP
\fR#include 'tokens\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBt_ast\fP * \fBcreate_redir_node\fP (\fBt_token\fP *token)"
.br
.ti -1c
.RI "int \fBis_redir_node\fP (\fBt_token\fP *tokens)"
.br
.ti -1c
.RI "\fBt_ast\fP * \fBclr_node\fP (\fBt_token\fP **tokens, \fBt_token\fP *next_token, \fBt_ast\fP *redirect_node)"
.br
.ti -1c
.RI "\fBt_ast\fP * \fBmanage_redirs\fP (\fBt_token\fP **tokens)"
.br
.ti -1c
.RI "\fBt_ast\fP * \fBmanage_pipe\fP (\fBt_token\fP **tokens)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBt_ast\fP * clr_node (\fBt_token\fP ** tokens, \fBt_token\fP * next_token, \fBt_ast\fP * redirect_node)"

.PP
Definition at line \fB53\fP of file \fBparser\&.c\fP\&.
.nf
54 {
55     (*tokens)\->next = next_token\->next\->next;
56     redirect_node\->left = manage_redirs(tokens);
57     redirect_node\->right = create_redir_node((next_token\->next));
58     free(next_token\->data);
59     free(next_token);
60     return (redirect_node);
61 }
.PP
.fi

.PP
References \fBcreate_redir_node()\fP, \fBs_token::data\fP, \fBs_ast::left\fP, \fBmanage_redirs()\fP, \fBs_token::next\fP, and \fBs_ast::right\fP\&.
.PP
Referenced by \fBmanage_redirs()\fP\&.
.SS "\fBt_ast\fP * create_redir_node (\fBt_token\fP * token)"

.PP
Definition at line \fB21\fP of file \fBparser\&.c\fP\&.
.nf
22 {
23     t_ast           *node;
24 
25     node = malloc(sizeof(t_ast));
26     if (!node)
27         return (NULL);
28     node\->type = token\->type;
29     node\->args = malloc(sizeof(char *) * 2);
30     if (!node\->args)
31     {
32         free(node);
33         return (NULL);
34     }
35     node\->args[0] = token\->data;
36     node\->args[1] = NULL;
37     node\->left = NULL;
38     node\->right = NULL;
39     free(token);
40     return (node);
41 }
.PP
.fi

.PP
References \fBs_ast::args\fP, \fBs_token::data\fP, \fBs_ast::left\fP, \fBs_ast::right\fP, \fBs_ast::type\fP, and \fBs_token::type\fP\&.
.PP
Referenced by \fBclr_node()\fP, and \fBcreate_redir()\fP\&.
.SS "int is_redir_node (\fBt_token\fP * tokens)"

.PP
Definition at line \fB43\fP of file \fBparser\&.c\fP\&.
.nf
44 {
45     if (tokens\->type == REDIR_IN
46         || tokens\->type == REDIR_OUT
47         || tokens\->type == REDIR_APPEND
48         || tokens\->type == REDIR_HEREDOC)
49         return (1);
50     return (0);
51 }
.PP
.fi

.PP
References \fBREDIR_APPEND\fP, \fBREDIR_HEREDOC\fP, \fBREDIR_IN\fP, \fBREDIR_OUT\fP, and \fBs_token::type\fP\&.
.PP
Referenced by \fBmanage_redirs()\fP\&.
.SS "\fBt_ast\fP * manage_pipe (\fBt_token\fP ** tokens)"

.PP
Definition at line \fB87\fP of file \fBparser\&.c\fP\&.
.nf
88 {
89     t_token     *tmp;
90     t_token     *next_token;
91     t_ast       *pipe_node;
92 
93     tmp = *tokens;
94     while (*tokens && (*tokens)\->next)
95     {
96         next_token = (*tokens)\->next;
97         if ((*tokens)\->next\->type == PIPE)
98         {
99             pipe_node = new_ast_node((*tokens)\->next\->type);
100             (*tokens)\->next = NULL;
101             pipe_node\->left = manage_redirs(&tmp);
102             if (next_token\->next == NULL)
103                 pipe_node\->right = NULL;
104             else
105                 pipe_node\->right = manage_pipe(&(next_token\->next));
106             free(next_token\->data);
107             free(next_token);
108             return (pipe_node);
109         }
110         *tokens = next_token;
111     }
112     return (manage_redirs(&tmp));
113 }
.PP
.fi

.PP
References \fBs_token::data\fP, \fBs_ast::left\fP, \fBmanage_pipe()\fP, \fBmanage_redirs()\fP, \fBnew_ast_node()\fP, \fBs_token::next\fP, \fBPIPE\fP, and \fBs_ast::right\fP\&.
.PP
Referenced by \fBmanage_pipe()\fP, and \fBparse_tokens()\fP\&.
.SS "\fBt_ast\fP * manage_redirs (\fBt_token\fP ** tokens)"

.PP
Definition at line \fB63\fP of file \fBparser\&.c\fP\&.
.nf
64 {
65     t_token     *tmp;
66     t_ast       *redirect_node;
67     t_token     *next_token;
68 
69     if (!*tokens)
70         return (NULL);
71     tmp = *tokens;
72     if (is_redir_node(*tokens))
73         return (create_redir(tokens, tmp));
74     while (*tokens && (*tokens)\->next)
75     {
76         next_token = (*tokens)\->next;
77         if (is_redir_node((*tokens)\->next))
78         {
79             redirect_node = new_ast_node((*tokens)\->next\->type);
80             return (clr_node(tokens, next_token, redirect_node));
81         }
82         *tokens = next_token;
83     }
84     return (manage_commands(&tmp));
85 }
.PP
.fi

.PP
References \fBclr_node()\fP, \fBcreate_redir()\fP, \fBis_redir_node()\fP, \fBmanage_commands()\fP, \fBnew_ast_node()\fP, and \fBs_token::next\fP\&.
.PP
Referenced by \fBclr_node()\fP, \fBcreate_redir()\fP, and \fBmanage_pipe()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
