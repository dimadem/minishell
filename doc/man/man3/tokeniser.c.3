.TH "/Users/dimadem/Documents/GitHub/minishell/src/parser/tokeniser.c" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/src/parser/tokeniser.c
.SH SYNOPSIS
.br
.PP
\fR#include 'tokens\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBhandle_special_chars\fP (char **str, \fBt_token\fP **tokens)"
.br
.ti -1c
.RI "void \fBappend_phrase_if_valid\fP (char **start, char **str, \fBt_token\fP **tokens)"
.br
.ti -1c
.RI "void \fBhandle_phrase\fP (char **str, \fBt_token\fP **tokens)"
.br
.ti -1c
.RI "void \fBprint_tokens\fP (\fBt_token\fP *tokens)"
.br
.ti -1c
.RI "\fBt_token\fP * \fBtokenise\fP (char *str)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void append_phrase_if_valid (char ** start, char ** str, \fBt_token\fP ** tokens)"

.PP
Definition at line \fB49\fP of file \fBtokeniser\&.c\fP\&.
.nf
50 {
51     char    *phrase;
52 
53     if (*str > *start)
54     {
55         phrase = ft_strndup(*start, *str \- *start);
56         if (phrase)
57         {
58             append_token(tokens, new_token(phrase, PHRASE));
59             free(phrase);
60         }
61         else
62             ft_printf("Error: unable to allocate memory for token\\n");
63     }
64 }
.PP
.fi

.PP
References \fBappend_token()\fP, \fBft_printf()\fP, \fBft_strndup()\fP, \fBnew_token()\fP, and \fBPHRASE\fP\&.
.PP
Referenced by \fBhandle_phrase()\fP\&.
.SS "void handle_phrase (char ** str, \fBt_token\fP ** tokens)"

.PP
Definition at line \fB66\fP of file \fBtokeniser\&.c\fP\&.
.nf
67 {
68     char    *start;
69     char    quote_flag;
70     char    quote_type;
71 
72     start = *str;
73     quote_flag = 0;
74     quote_type = 0;
75     while (**str)
76     {
77         if (!quote_flag && (**str == '\\'' || **str == '\\"'))
78         {
79             quote_flag = 1;
80             quote_type = **str;
81         }
82         else if (quote_flag && **str == quote_type)
83             quote_flag = 0;
84         if (!quote_flag && ft_strchr(" \\t\\n\\r\\v\\f<|>", **str) != NULL)
85             break ;
86         (*str)++;
87     }
88     append_phrase_if_valid(&start, str, tokens);
89 }
.PP
.fi

.PP
References \fBappend_phrase_if_valid()\fP, and \fBft_strchr()\fP\&.
.PP
Referenced by \fBtokenise()\fP\&.
.SS "void handle_special_chars (char ** str, \fBt_token\fP ** tokens)"

.PP
Definition at line \fB22\fP of file \fBtokeniser\&.c\fP\&.
.nf
23 {
24     if (**str == '<')
25     {
26         if (*(*str + 1) == '<')
27         {
28             append_token(tokens, new_token("<<", REDIR_HEREDOC));
29             (*str)++;
30         }
31         else
32             append_token(tokens, new_token("<", REDIR_IN));
33     }
34     else if (**str == '>')
35     {
36         if (*(*str + 1) == '>')
37         {
38             append_token(tokens, new_token(">>", REDIR_APPEND));
39             (*str)++;
40         }
41         else
42             append_token(tokens, new_token(">", REDIR_OUT));
43     }
44     else if (**str == '|')
45         append_token(tokens, new_token("|", PIPE));
46     (*str)++;
47 }
.PP
.fi

.PP
References \fBappend_token()\fP, \fBnew_token()\fP, \fBPIPE\fP, \fBREDIR_APPEND\fP, \fBREDIR_HEREDOC\fP, \fBREDIR_IN\fP, and \fBREDIR_OUT\fP\&.
.PP
Referenced by \fBtokenise()\fP\&.
.SS "void print_tokens (\fBt_token\fP * tokens)"

.PP
Definition at line \fB91\fP of file \fBtokeniser\&.c\fP\&.
.nf
92 {
93     t_token *token;
94     int     i;              
95 
96     i = 0;
97     token = tokens;
98     while (token != NULL)
99     {
100         printf("input[%d] \->  %s \\n", i, token\->data);
101         token = token\->next;
102         i++;
103     }
104 }
.PP
.fi

.PP
References \fBs_token::data\fP, and \fBs_token::next\fP\&.
.SS "\fBt_token\fP * tokenise (char * str)"

.PP
Definition at line \fB106\fP of file \fBtokeniser\&.c\fP\&.
.nf
107 {
108     t_token *tokens;
109 
110     tokens = NULL;
111     while (*str)
112     {
113         while (*str && ft_strchr(" \\t\\n\\r\\v\\f", *str) != NULL)
114             str++;
115         if (ft_strchr("<|>", *str) != NULL)
116             handle_special_chars(&str, &tokens);
117         else
118             handle_phrase(&str, &tokens);
119     }
120     return (tokens);
121 }
.PP
.fi

.PP
References \fBft_strchr()\fP, \fBhandle_phrase()\fP, and \fBhandle_special_chars()\fP\&.
.PP
Referenced by \fBmain_loop()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
