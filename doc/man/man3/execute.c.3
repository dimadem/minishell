.TH "/Users/dimadem/Documents/GitHub/minishell/src/execute/execute.c" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/src/execute/execute.c
.SH SYNOPSIS
.br
.PP
\fR#include 'builtins\&.h'\fP
.br
\fR#include 'libft\&.h'\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <sys/wait\&.h>\fP
.br
\fR#include 'shell\&.h'\fP
.br
\fR#include 'execute\&.h'\fP
.br
\fR#include 'tokens\&.h'\fP
.br
\fR#include 'pipe\&.h'\fP
.br
\fR#include 'redirection\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBexecute_ast\fP (\fBt_ast\fP *node, \fBt_ms_data\fP *data)"
.br
.RI "execute Abstract Syntax Tree "
.ti -1c
.RI "static int \fBexecute\fP (\fBt_ms_data\fP *data)"
.br
.RI "execute distribution function "
.ti -1c
.RI "static int \fBnew_process\fP (\fBt_ms_data\fP *data)"
.br
.RI "executes a new process "
.in -1c
.SH "Function Documentation"
.PP 
.SS "static int execute (\fBt_ms_data\fP * data)\fR [static]\fP"

.PP
execute distribution function --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIdata\fP minishell data struct
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
int return status:
.RE
.PP

.IP "\(bu" 2
- 0: success 
.br

.IP "\(bu" 2
- 1: error 
.PP

.PP
Definition at line \fB70\fP of file \fBexecute\&.c\fP\&.
.nf
71 {
72     size_t  i;
73     char    *builtin_commands[7];
74     int     (*builtin_functions[7])(t_ms_data *);
75 
76     builtin_commands[0] = "cd";
77     builtin_commands[1] = "echo";
78     builtin_commands[2] = "env";
79     builtin_commands[3] = "exit";
80     builtin_commands[4] = "export";
81     builtin_commands[5] = "pwd";
82     builtin_commands[6] = "unset";
83     builtin_functions[0] = &builtin_cd;
84     builtin_functions[1] = &builtin_echo;
85     builtin_functions[2] = &builtin_env;
86     builtin_functions[3] = &builtin_exit;
87     builtin_functions[4] = &builtin_export;
88     builtin_functions[5] = &builtin_pwd;
89     builtin_functions[6] = &builtin_unset;
90     if (data\->args[0] == NULL)
91         ft_perror("minishel");
92     i = \-1;
93     while (++i < sizeof(builtin_commands) / sizeof(char *))
94         if (ft_strcmp(data\->args[0], builtin_commands[i]) == 0)
95             return ((*builtin_functions[i])(data));
96     return (new_process(data));
97 }
.PP
.fi

.PP
References \fBs_ms_data::args\fP, \fBbuiltin_cd()\fP, \fBbuiltin_echo()\fP, \fBbuiltin_env()\fP, \fBbuiltin_exit()\fP, \fBbuiltin_export()\fP, \fBbuiltin_pwd()\fP, \fBbuiltin_unset()\fP, \fBft_perror()\fP, \fBft_strcmp()\fP, and \fBnew_process()\fP\&.
.PP
Referenced by \fBexecute_ast()\fP\&.
.SS "int execute_ast (\fBt_ast\fP * node, \fBt_ms_data\fP * data)"

.PP
execute Abstract Syntax Tree --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fInode\fP Abstract Syntax Tree Node
.RE
.PP

.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIdata\fP minishell data struct
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
int return status:
.RE
.PP

.IP "\(bu" 2
- 0: success 
.br

.IP "\(bu" 2
- 1: error 
.PP

.PP
Definition at line \fB37\fP of file \fBexecute\&.c\fP\&.
.nf
38 {
39     if (!node)
40         return (1);
41     if (node\->type == PIPE)
42         return (builtin_pipe(node, data));
43     else if (node\->type == ENV_VAR)
44         printf(BLU"ENV_VAR\\n"RESET);
45     else if (node\->type == REDIR_IN)
46         return (redirect_in(node, data));
47     else if (node\->type == REDIR_OUT)
48         return (redirect_out(node, data));
49     else if (node\->type == REDIR_APPEND)
50         return (redirect_append(node, data));
51     else if (node\->type == REDIR_HEREDOC)
52         return (redirect_here_doc(node, data));
53     else if (node\->type == PHRASE)
54     {
55         data\->args = node\->args;
56         return (execute(data));
57     }
58     return (0);
59 }
.PP
.fi

.PP
References \fBs_ast::args\fP, \fBs_ms_data::args\fP, \fBBLU\fP, \fBbuiltin_pipe()\fP, \fBENV_VAR\fP, \fBexecute()\fP, \fBPHRASE\fP, \fBPIPE\fP, \fBREDIR_APPEND\fP, \fBREDIR_HEREDOC\fP, \fBREDIR_IN\fP, \fBREDIR_OUT\fP, \fBredirect_append()\fP, \fBredirect_here_doc()\fP, \fBredirect_in()\fP, \fBredirect_out()\fP, \fBRESET\fP, and \fBs_ast::type\fP\&.
.PP
Referenced by \fBexecute_child()\fP, \fBexecute_child()\fP, \fBmain_loop()\fP, \fBredirect_append()\fP, \fBredirect_in()\fP, and \fBredirect_out()\fP\&.
.SS "static int new_process (\fBt_ms_data\fP * data)\fR [static]\fP"

.PP
executes a new process --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIdata\fP minishell data structure
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
int return status:
.RE
.PP

.IP "\(bu" 2
- 0: success 
.br

.IP "\(bu" 2
- 1: error 
.PP

.PP
Definition at line \fB108\fP of file \fBexecute\&.c\fP\&.
.nf
109 {
110     pid_t   pid;
111 
112     if (data\->std_in == \-1)
113         data\->std_in = dup(STDIN_FILENO);
114     if (data\->std_out == \-1)
115         data\->std_out = dup(STDOUT_FILENO);
116     pid = fork();
117     if (pid == \-1)
118         ft_perror("fork");
119     if (pid == 0)
120     {
121         if (data\->std_in != \-1)
122             dup2(data\->std_in, STDIN_FILENO);
123         if (data\->std_out != \-1)
124             dup2(data\->std_out, STDOUT_FILENO);
125         close_fds(data\->std_in, data\->std_out);
126         if (execve(ft_find_path(data\->args[0], data\->envp), \\
127                     data\->args, env_to_array(data\->envp)) == \-1)
128             ft_perror("minishell");
129     }
130     close_fds(data\->std_in, data\->std_out);
131     waitpid(pid, &data\->exit_status, 0);
132     return (0);
133 }
.PP
.fi

.PP
References \fBs_ms_data::args\fP, \fBclose_fds()\fP, \fBenv_to_array()\fP, \fBs_ms_data::envp\fP, \fBs_ms_data::exit_status\fP, \fBft_find_path()\fP, \fBft_perror()\fP, \fBs_ms_data::std_in\fP, and \fBs_ms_data::std_out\fP\&.
.PP
Referenced by \fBexecute()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
