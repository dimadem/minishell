.TH "/Users/dimadem/Documents/GitHub/minishell/lib/libft/src/ft_split.c" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/lib/libft/src/ft_split.c
.SH SYNOPSIS
.br
.PP
\fR#include 'libft\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static int \fBcount_words\fP (const char *s, char c)"
.br
.ti -1c
.RI "static char * \fBstrndup\fP (const char *s, size_t n)"
.br
.ti -1c
.RI "static void \fBsplit_into_words\fP (char **result, const char *s, char c)"
.br
.ti -1c
.RI "char ** \fBft_split\fP (const char *s, char c)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "static int count_words (const char * s, char c)\fR [static]\fP"

.PP
Definition at line \fB32\fP of file \fBft_split\&.c\fP\&.
.nf
33 {
34     int count;
35     int in_word;
36 
37     count = 0;
38     in_word = 0;
39     while (*s)
40     {
41         if (*s != c)
42         {
43             if (!in_word)
44             {
45                 in_word = 1;
46                 count++;
47             }
48         }
49         else
50             in_word = 0;
51         s++;
52     }
53     return (count);
54 }
.PP
.fi

.PP
Referenced by \fBft_split()\fP\&.
.SS "char ** ft_split (const char * s, char c)"

.PP
Definition at line \fB95\fP of file \fBft_split\&.c\fP\&.
.nf
96 {
97     char    **result;
98     int     word_count;
99 
100     if (!s)
101         return (NULL);
102     word_count = count_words(s, c);
103     result = malloc(sizeof(char *) * (word_count + 1));
104     if (!result)
105         return (NULL);
106     split_into_words(result, s, c);
107     return (result);
108 }
.PP
.fi

.PP
References \fBcount_words()\fP, and \fBsplit_into_words()\fP\&.
.PP
Referenced by \fBbuiltin_pipe_test()\fP, \fBcheck_heredoc()\fP, and \fBft_find_path()\fP\&.
.SS "static void split_into_words (char ** result, const char * s, char c)\fR [static]\fP"

.PP
Definition at line \fB68\fP of file \fBft_split\&.c\fP\&.
.nf
69 {
70     int         i;
71     int         in_word;
72     const char  *start;
73 
74     i = 0;
75     in_word = 0;
76     while (*s)
77     {
78         if (*s != c && !in_word)
79         {
80             start = s;
81             in_word = 1;
82         }
83         else if (*s == c && in_word)
84         {
85             result[i++] = strndup(start, s \- start);
86             in_word = 0;
87         }
88         s++;
89     }
90     if (in_word)
91         result[i++] = strndup(start, s \- start);
92     result[i] = NULL;
93 }
.PP
.fi

.PP
References \fBstrndup()\fP\&.
.PP
Referenced by \fBft_split()\fP\&.
.SS "static char * strndup (const char * s, size_t n)\fR [static]\fP"

.PP
Definition at line \fB56\fP of file \fBft_split\&.c\fP\&.
.nf
57 {
58     char    *dup;
59 
60     dup = malloc(n + 1);
61     if (!dup)
62         return (NULL);
63     ft_memcpy(dup, s, n);
64     dup[n] = '\\0';
65     return (dup);
66 }
.PP
.fi

.PP
References \fBft_memcpy()\fP\&.
.PP
Referenced by \fBsplit_into_words()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
