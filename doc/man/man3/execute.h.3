.TH "/Users/dimadem/Documents/GitHub/minishell/inc/execute.h" 3 "Version 1" "maxishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/dimadem/Documents/GitHub/minishell/inc/execute.h
.SH SYNOPSIS
.br
.PP
\fR#include 'shell\&.h'\fP
.br
\fR#include 'tokens\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBexecute_ast\fP (\fBt_ast\fP *node, \fBt_ms_data\fP *data)"
.br
.RI "execute Abstract Syntax Tree "
.ti -1c
.RI "char * \fBft_find_path\fP (char *cmd, \fBt_env\fP *envp)"
.br
.RI "function find the full path of the executed command "
.ti -1c
.RI "void \fBft_free_2d_arr\fP (char **arr)"
.br
.RI "clean up 2d array "
.ti -1c
.RI "int \fBft_perror\fP (char *str)"
.br
.RI "return error message and exit "
.ti -1c
.RI "void \fBclose_fds\fP (int in, int out)"
.br
.RI "close two file descriptors "
.ti -1c
.RI "void \fBhandle_io_fd\fP (\fBt_ms_data\fP *data)"
.br
.RI "close temporary input/output file descriptors and reset them to -1 "
.in -1c
.SH "Function Documentation"
.PP 
.SS "void close_fds (int in, int out)"

.PP
close two file descriptors --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIfds\fP file descriptors 
.RE
.PP

.PP

.PP
Definition at line \fB58\fP of file \fButils_0\&.c\fP\&.
.nf
59 {
60     close(in);
61     close(out);
62 }
.PP
.fi

.PP
Referenced by \fBbuiltin_pipe()\fP, \fBexecute_child()\fP, and \fBnew_process()\fP\&.
.SS "int execute_ast (\fBt_ast\fP * node, \fBt_ms_data\fP * data)"

.PP
execute Abstract Syntax Tree --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fInode\fP Abstract Syntax Tree Node
.RE
.PP

.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIdata\fP minishell data struct
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
int return status:
.RE
.PP

.IP "\(bu" 2
- 0: success 
.br

.IP "\(bu" 2
- 1: error 
.PP

.PP
Definition at line \fB37\fP of file \fBexecute\&.c\fP\&.
.nf
38 {
39     if (!node)
40         return (1);
41     if (node\->type == PIPE)
42         return (builtin_pipe(node, data));
43     else if (node\->type == ENV_VAR)
44         printf(BLU"ENV_VAR\\n"RESET);
45     else if (node\->type == REDIR_IN)
46         return (redirect_in(node, data));
47     else if (node\->type == REDIR_OUT)
48         return (redirect_out(node, data));
49     else if (node\->type == REDIR_APPEND)
50         return (redirect_append(node, data));
51     else if (node\->type == REDIR_HEREDOC)
52         return (redirect_here_doc(node, data));
53     else if (node\->type == PHRASE)
54     {
55         data\->args = node\->args;
56         return (execute(data));
57     }
58     return (0);
59 }
.PP
.fi

.PP
References \fBs_ast::args\fP, \fBs_ms_data::args\fP, \fBBLU\fP, \fBbuiltin_pipe()\fP, \fBENV_VAR\fP, \fBexecute()\fP, \fBPHRASE\fP, \fBPIPE\fP, \fBREDIR_APPEND\fP, \fBREDIR_HEREDOC\fP, \fBREDIR_IN\fP, \fBREDIR_OUT\fP, \fBredirect_append()\fP, \fBredirect_here_doc()\fP, \fBredirect_in()\fP, \fBredirect_out()\fP, \fBRESET\fP, and \fBs_ast::type\fP\&.
.PP
Referenced by \fBexecute_child()\fP, \fBexecute_child()\fP, \fBmain_loop()\fP, \fBredirect_append()\fP, \fBredirect_in()\fP, and \fBredirect_out()\fP\&.
.SS "char * ft_find_path (char * cmd, \fBt_env\fP * envp)"

.PP
function find the full path of the executed command --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIcmd\fP string from the first argument
.RE
.PP

.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIenvp\fP structure with environment variables
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
char* returns the full path of the command 
.RE
.PP

.PP

.PP
Definition at line \fB28\fP of file \fButils_1\&.c\fP\&.
.nf
29 {
30     char    **path;
31     char    *tmp_full_path;
32     int     i;
33 
34     path = ft_split(get_env(envp, "PATH"), ':');
35     i = \-1;
36     while (path[++i] != NULL)
37     {
38         if (ft_strncmp(cmd, "/", 1) != 0)
39             relative_path_handle(cmd, path[i], &tmp_full_path);
40         else
41             tmp_full_path = ft_strdup(cmd);
42         if (access(tmp_full_path, F_OK) == 0)
43         {
44             ft_free_2d_arr(path);
45             return (tmp_full_path);
46         }
47         free(tmp_full_path);
48     }
49     ft_free_2d_arr(path);
50     return (NULL);
51 }
.PP
.fi

.PP
References \fBft_free_2d_arr()\fP, \fBft_split()\fP, \fBft_strdup()\fP, \fBft_strncmp()\fP, \fBget_env()\fP, and \fBrelative_path_handle()\fP\&.
.PP
Referenced by \fBnew_process()\fP\&.
.SS "void ft_free_2d_arr (char ** arr)"

.PP
clean up 2d array --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIarr\fP simple two dimensional array 
.RE
.PP

.PP

.PP
Definition at line \fB28\fP of file \fButils_0\&.c\fP\&.
.nf
29 {
30     int i;
31 
32     i = \-1;
33     while (arr[++i] != NULL)
34         free(arr[i]);
35     free(arr);
36 }
.PP
.fi

.PP
Referenced by \fBft_find_path()\fP\&.
.SS "int ft_perror (char * str)"

.PP
return error message and exit --
.IP "\(bu" 2
\fBParameters\fP
.RS 4
\fIstr\fP paste the error message
.RE
.PP

.IP "\(bu" 2
\fBReturns\fP
.RS 4
int return status:
.RE
.PP

.IP "\(bu" 2
- 1: EXIT_FAILURE 
.PP

.PP
Definition at line \fB46\fP of file \fButils_0\&.c\fP\&.
.nf
47 {
48     perror (str);
49     exit(EXIT_FAILURE);
50 }
.PP
.fi

.PP
Referenced by \fBbuiltin_pipe()\fP, \fBexecute()\fP, \fBexecute_child()\fP, \fBexecute_child()\fP, \fBnew_process()\fP, and \fBopen_tmp_file()\fP\&.
.SS "void handle_io_fd (\fBt_ms_data\fP * data)"

.PP
close temporary input/output file descriptors and reset them to -1 -- 
.PP
\fBParameters\fP
.RS 4
\fIdata\fP minishell structure 
.RE
.PP

.PP
Definition at line \fB69\fP of file \fButils_0\&.c\fP\&.
.nf
70 {
71     if (data\->std_in != \-1 && data\->std_out != \-1)
72     {
73         close(data\->std_in);
74         close(data\->std_out);
75         data\->std_in = \-1;
76         data\->std_out = \-1;
77     }
78 }
.PP
.fi

.PP
References \fBs_ms_data::std_in\fP, and \fBs_ms_data::std_out\fP\&.
.PP
Referenced by \fBmain_loop()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for maxishell from the source code\&.
